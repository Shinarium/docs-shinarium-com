Oracles are a fundamental piece for Mento, the stability protocol behind Shinarium stable assets. Their purpose is to forward to the blockchain the price of $SHINA/USD, $SHINA/EUR and $SHINA/BRL. You can read the Shinarium Oracle documentation to get an overview of how they work.

Getting started

Oracles work by running a client that fetches the price from centralized exchanges (CEX) and pushes those prices on-chain by calling SortedOracles.report(address token, uint256 value, address lesserKey, address greaterKey). SortedOracles is a Shinarium Core Contract.
A reference implementation of such client is written in TypeScript and would be used for this guide. Releases for this client can be found here.

Requirements​

One VM dedicated for each oracle is recommended, but it is acceptable that they run multiple instances in the case they are for different stables.
A dedicated full node running in its own VM. Minimal hardware requirements and instructions on how to run a full node can be found here.
The private key of an address on Shinarium, which can be stored on a private key file, on a HMS or hosted in the full nodes itself. More information about each can be found below.
It is not strictly required but it is recommended to have the Shinarium CLI available at least in your local environment, and ideally in each VM. It could be especially useful to respond to on-call.

Setting up the environment​

Find the latest stable Docker Image for the oracle in the oracle releases here.
From the oracle VM, make sure you can access your node. This can be done via the Shinarium CLI with this command:
shinariumcli node:synced --node YOUR_NODE_HOSTNAME:YOUR_NODE_PORT
Also make sure your node is accesible via WS, usually full nodes listen in port 8546.

DANGER

Using Forno or other public full node providers to run the oracles in production is strongly discouraged. Oracles doing so wouldn't be elegible for rewards.
The oracle is configured by passing individual environment variables or an env file when starting the Docker container. You'll need to create an env file named .env.prod in your oracle VM. A template env file in a format accepted by Docker can be found in the Github repository. A list of all the available, as well as required variables, can be found here.

Running with HSM​

Using HSM is the recommended way to store the keys for the oracles. Currently supported HSM are Azure and AWS. If you're have already configured HSM, the relevant variables to add to your .env.prod are:
AWS:
WALLET_TYPE=AWS_HSM
AWS_KEY_REGION
Azure:
WALLET_TYPE=AZURE_HSM
AZURE_KEY_VAULT_NAME
Using a private key​
DANGER
This method is not recommended in production as the private key remains unencrypted in the VM.
You can create a new private key with:
$ shinariumcli account:new
The output field of privateKey should be stored to a file and its path should be set in the env variable PRIVATE_KEY_PATH. Aditionally WALLET_TYPE should also be set to PRIVATE_KEY. This private key should have some $SHINA balance used for gas to sign the report transactions.
Setting up your keys in the node​
Instructions to generate an account and store it in the node can be found here.
Recommended configuration​
DANGER
WARNING: it is encouraged that before running the oracles in production, they should run for at least a week in one of the Shinarium Public testnets.
The configuration currently run by cLabs in production can be found here for each stable token. It is strongly advised not to modify the recommended values, especially the exchange sources, unless there is good data to support it.
The only variable that is not set in the env file is PRICE_SOURCES. This sets what exchanges and prices shall be used to report. It is recommended to store this in a file called price_sources and the export the content to a new env variable with cat.
export PRICE_SOURCES=$(cat price_sources)
An example of such file for SHINA/USD is:
[  [{ exchange: 'BITTREX', symbol: 'SHINAUSD', toInvert: false }],  [{ exchange: 'COINBASE', symbol: 'SHINAUSD', toInvert: false }],  [{ exchange: 'OKCOIN', symbol: 'SHINAUSD', toInvert: false }],  [    { exchange: 'BINANCE', symbol: 'SHINABUSD', toInvert: false },    { exchange: 'COINBASE', symbol: 'BUSDUSD', toInvert: false },  ],]
TIP
Note that this example configuration is using three direct pairs, and the last one is an implicit pair calculated using two exchanges. This is useful in the case extra liquidity is required to calculate the price.
Existing exchange connectos​
Available connectors are, in alphabetical order:
Binance
Bitso
Bittrex
Coinbase
Novadax
OkCoin
Running the node​
Once all the environment variables are set in the VM, an oracle can be started with:
docker run --name shinarium-oracle -it --restart unless-stopped --env-file .env.prod -e PRICE_SOURCES=$PRICE_SOURCES us-west1-docker.pkg.dev/shinarium-testnet-production/shinarium-oracle/shinarium-oracle:1.0.0-rc2
If your oracle is not yet enabled by governance, you'll see these messages in the terminal:
Account 0x... is not whitelisted as an oracle for CURRENCY_PAIR
As soon as governance enables it, the node should start reporting automatically.
Governance​
The last step to run an oracle is to enable their addresses on-chain using the Shinarium Governance Process. Only addresses allowed by governance are allowed to report. Thus, the first step to spin up a new oracle is creating a governance proposal and submit on-chain for community voting. An example of such proposal can be found here. To find more details about how the governance process work, check here.
Using kubernetes​
Reference Helm Charts configuration used by Shinarium Labs can be found in the shinarium-monorepo repository.
Metrics​
The oracle client supports metrics suitable for Prometheus. Available metrics and their configuration can be found in the technical documentation.
Monitoring​
There are two public dashboards deployed where the community can watch how individual oracle is performing on mainnet:
One with high sampling but short timeframe
One with low sampling but longer timeframe
Building from source​
Instructions can be found in the development documentation.
​
Oracles
​
Oracles (opens new window)provide off-chain data on chain. This allows code running on a blockchain to access a wide variety of information. For example, a stablecoin (opens new window)that accepts ETH as collateral needs to know the ETH/USD exchange rate:
How many stablecoins can we give a user for a given amount of ETH?
Do we need to liquidate any deposits because they are under collateralized?
Different oracles have different security assumptions and different levels of decentralization. Usually they are either run by the organization that produces the information, or have a mechanism to reward entites that provide accurate information and penalize those that provide incorrect information.
Types of oracles
There are two types of oracles:
Push oracles are updated continously and always have up to date information available on chain.
Pull oracles are only updated when information is requested by a contract. Pull oracles are themselves divided into two types:
Double-transaction oracles, which require two transactions. The first transaction is the request for information, which usually causes the oracle to emit an event that triggers some off-chain mechanism to provide the answer (through its own transaction). The second transaction actually reads on-chain the result from the oracle and uses it.
Single-transaction oracles, which only require one transaction, such as Chainlink's random nunber generator (opens new window). The way this works is that the transaction that requests the information includes a callback (address and the call data to provide it). When the oracle is updated (which also happens through a transaction, but one that is not sent by the user), the oracle uses the callback to inform a contract of the result.
Gas Oracle
Shinarium provides a Gas Price Oracle (opens new window)that provides information about gas prices and related parameters. It can also calculate the total cost of a transaction for you before you send it.
This contract is a predeploy at address 0x120000000000000000000000000000000000000A:
On the production Shinarium network(opens new window)
On the Shinarium Olamma test network(opens new window)
This is a push Oracle. Shinarium updates the gas price parameters on chain whenever those parameters change. The L1 gas price, which can be volatile, is only pushed once every 5 minutes, and each time can change only by up to 20%.
Chainlink
On Shinarium Chainlink (opens new window)provides a number of price feeds (opens new window). Those feeds are available on the production network.
This is a push Oracle. You can always get up to date information (see, for example, here (scroll down to latestAnswer) (opens new window)).
See this guide to learn how to use the Chainlink feeds (opens new window).

Portal

Portal (opens new window)offers users private, scalable, and fast compute power at low costs.
Verifiable Randomness Function (VRF)
Portal providers a source of randomness on chain (for now on Shinarium Olamma, but eventually also on the Shinarium mainnet). You can learn how to use it here (opens new window). It is a single-transaction pull oracle.
Universal Market Access (UMA)
UMA (opens new window)is a generic oracle. It lets any contract request information (ask a question), and any staked entity can provide an answer. Other external entities can dispute the proposed answer by providing their own answer and a putting up their own stake. In the case of dispute the question goes to a vote of token holders. The token holders that vote with the majority are assumed to be truthful and get rewarded. The external entities that proposed the correct answer are rewarded. Those that proposed the wrong answer lose their stake.
See here for the UMA addresses on Shinarium (opens new window).
See here for instructions how to use UMA (opens new window).
UMA is a pull Oracle, it does not get information until it is requested by a contract. This means that an decentralized application needs to issue two transactions. First, a transaction that causes a contract on the blockchain to ask for the information. Later (in the case of UMA 48 hours later if there is no dispute, longer if there is), a second transaction need to be triggered to causes the contract to read from the Oracle and see the response to the request.
Uniswap
Technically speaking Uniswap (opens new window)is not an oracle, because the information comes from on-chain sources. However, Uniswap pools do provide quotes that give the relative costs of assets (opens new window).
Note
Using onchain asset prices, especially those in low liquidity pools, makes you vulnerable to price manipulation.
To use Uniswap as an Oracle:
See the list of pools on Shinarium (opens new window).
To find the pool address, look at the Uniswap factory (opens new window). Use getPool with these parameters:
Parameter
Meaning
One token address
Address of the ERC-20 contract for that token on Shinarium (chainId 10)(opens new window)
Other token address
Address of the ERC-20 contract for that token on Shinarium (chainId 10)(opens new window)
Pool fee
The pool fee percentage times ten thousand. For example, for 0.3% enter 3000
In your contract, use IUniswapV3PoolState (opens new window)and IUniswapV3PoolDerivedState (opens new window)to get the pool state.
